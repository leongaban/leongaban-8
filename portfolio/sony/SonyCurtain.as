// ⌈                                                    ⌉//   TouchStorm.com//   Flash Developer: Leon Gaban | http://leongaban.com// ⌊                                                    ⌋package{	import flash.xml.*;	import flash.media.Video;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import src.model.Mask;	import src.model.Fonts;	import src.model.Navigation;	import src.display.Intro;	import src.display.Frame;	import src.display.Thumbnail;	import src.display.VideoClass;	import src.ui.ScrollBar;	import src.ui.ThumbnailController;	import src.events.CustomEvent;	import com.vmc.lib.VMCUtility;	import com.vmc.nodes.VideoRemoteNode;	//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ☼ SonyCurtain ☼	public class SonyCurtain extends Sprite	{		private var vc           :VideoClass;		private var nv           :Navigation;		private var bg           :Frame;		private var intro        :Intro;		private var myMask1      :Mask;		private var myMask2      :Mask;		private var scrollMask1  :Mask;		private var scrollMask2  :Mask;		private var thumb1       :Thumbnail;		private var thumb2       :Thumbnail;		private var scroll1      :ScrollBar;		private var scroll2      :ScrollBar;		private var rowSpacer    :Number = 136;		private var metaDataHash :Object; // [ VMC ]		private var xmlData      :XML = new XML();		private var xloader      :URLLoader = new URLLoader();		private var theUser      :String = root.loaderInfo.parameters.userName;		private var theClient    :String = root.loaderInfo.parameters.clientName;		private var footerTxt    :String;		private var videoHolder  :Video;		private var videoPlaying :Boolean = false;		private var videos       :Array = []		private var myXMLArray   :Array = []		private var thumbText1   :Array = []		private var thumbText2   :Array = []		private var thumbImgs1   :Array = []		private var thumbImgs2   :Array = []		private var thumbTitle1  :Array = []		private var thumbTitle2  :Array = []		private var videoDisplay :MovieClip;		private var sc1          :MovieClip;		private var sc2          :MovieClip;		private var tab1         :MovieClip;		private var tab2         :MovieClip;		private var track1       :MovieClip;		private var track2       :MovieClip;		private var roller1      :MovieClip;		private var roller2      :MovieClip;		private var closeBtn     :MovieClip;		private var container    :MovieClip;		private var rollerOn1    :MovieClip;		private var rollerOn2    :MovieClip;						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Constructor		public function SonyCurtain():void		{			// [ VMC ] Integration Point #1 - Player Load			var playerInfo:Object = { name: "SonyCurtain" }			var configInfo:Object = {				playerInfo: playerInfo,				accountKey: "097644b3d55e11debe2a0019b9f157b5",				genericTimerInfo: {					property: getPosition, // a function that returns the current playhead position					target: this,          // the scope to be applied when "getPosition()" is called					units: "seconds"       // "seconds" or "milliseconds" depending on your function's return value				}			}			VMCUtility.getInstance().configure(configInfo);			metaDataHash = new Object();  // hash to make access to metadata easier						this.addEventListener(Event.ADDED_TO_STAGE, createContainer);			xloader.addEventListener(Event.COMPLETE, loadXML);			xloader.load(new URLRequest("client_user.xml")); // testing			//loader.load(new URLRequest(theClient+"_"+theUser+".xml")); //<-- For LIVE use		}				public function createContainer(event:Event):void		{			stage.scaleMode  = StageScaleMode.NO_SCALE;			stage.align      =  StageAlign.TOP_LEFT;			container        = new EmptyMov();			videoDisplay   = new VideoDisplay();			videoDisplay.y = 54;			this.removeEventListener(Event.ADDED_TO_STAGE, createContainer);		}				private function loadXML(e:Event):void		{			xmlData = new XML(e.target.data);			ParseXML(xmlData);			xloader.removeEventListener(Event.COMPLETE, loadXML); 		}		 		private function ParseXML(xmlOutput:XML):void 		{			var idName:String;						for (var i:Number = 0; i < 2; i++)			{				idName = xmlOutput.tab.@["id"+(i+1)];				// nesting objects in array				for(var x in xmlOutput.tab[i].vid)				{					// Video names from XML file get pushed in array					videos.push(xmlOutput.tab[i].vid[x].@flv);										// [ VMC ] Added to capture meta-data indexed by the video name for easy retrieval when calling clip view later					metaDataHash[xmlOutput.tab[i].vid[x].@flv] = { thumb: xmlOutput.tab[i].vid[x].@thumb, title: xmlOutput.tab[i].vid[x].@title };				}								var thumbs:Array = [];				for(var y in xmlOutput.tab[i].vid) {					thumbs.push(xmlOutput.tab[i].vid[y].@thumb);				}				myXMLArray.push({id:idName,								 flvLocation:videos,								 thumbLocation:thumbs});			}						footerTxt = xmlOutput.footertext;						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Grabbing Copy			for each(var vidXml:XML in xmlData.tab[0].vid.*){				thumbText1.push(vidXml);			}			for each(var vidXml2:XML in xmlData.tab[1].vid.*){				thumbText2.push(vidXml2);			}			for each(var titleXML:XML in xmlData.tab[0].vid.@title){				thumbTitle1.push(titleXML);			}			for each(var titleXML2:XML in xmlData.tab[1].vid.@title){				thumbTitle2.push(titleXML2);			}						thumbImgs1.push(myXMLArray[0].thumbLocation);			thumbImgs2.push(myXMLArray[1].thumbLocation);						addChildren();		}				public function addChildren():void		{			//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Create Tab & ScrollBar MovieClips			sc1 = new EmptyMov;			sc2 = new EmptyMov;			sc1.x = 764;			sc2.x = 764;			sc1.y = 510;			sc2.y = 510;						tab1 = new EmptyMov;			tab2 = new EmptyMov;			tab1.y = 510;			tab2.y = 510;						track1 = new Track;  			track2 = new Track;						roller1 = new Roller;			roller2 = new Roller;			rollerOn1 = new RollerOn;   			rollerOn2 = new RollerOn;			rollerOn1.alpha = 0;			rollerOn2.alpha = 0;			roller1.buttonMode = true;			roller2.buttonMode = true;			roller1.addChild(rollerOn1);			roller2.addChild(rollerOn2);						closeBtn = new CloseButton;			closeBtn.x = 20;			closeBtn.y = 54;			closeBtn.buttonMode = true;						sc1.addChild(track1);			sc1.addChild(roller1);      			sc2.addChild(track2);			sc2.addChild(roller2);						myMask1 = new Mask(0, 54, 800, 450, 0);			myMask2 = new Mask(0, 54, 800, 450, 0);			scrollMask1 = new Mask(0, 0, 800, 504, 0);			scrollMask2 = new Mask(0, 0, 800, 504, 0);						videoHolder = videoDisplay.vidDisplay;						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Load Intro, Init Frame, Navigation & add Tabs			intro = new Intro();			bg = new Frame();			bg.addEventListener("onComplete", initFrame);						function initFrame():void {				bg.init(footerTxt);			}						nv = new Navigation();			nv.init(myXMLArray.length, myXMLArray, tab1, tab2, sc1, sc2);			nv.addEventListener("onPause", pauseMovie);			nv.addEventListener("onPlay", upauseMovie);						container.addChild(intro);			container.addChild(tab1);			container.addChild(tab2);						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Thumbnail Code			for (var i:Number = 0; i < thumbText1.length; i++) // 1			{				thumb1 = new Thumbnail(i, thumbTitle1[i], thumbText1[i], myXMLArray[0].thumbLocation[i], i);				thumb1.video = videos[i];				thumb1.addEventListener(CustomEvent.CLICK, function(e:CustomEvent){	videoSwitch(e.params.movie); }); 				thumb1.y = i * rowSpacer;				tab1.addChild(thumb1);			}						for (var k:Number = 0; k < thumbText2.length; k++) // 2			{				thumb2 = new Thumbnail(k, thumbTitle2[k], thumbText2[k], myXMLArray[1].thumbLocation[k], k);				thumb2.video = videos[thumbText1.length+k];				thumb2.addEventListener(CustomEvent.CLICK, function(e:CustomEvent){ videoSwitch(e.params.movie); });				thumb2.y = k * rowSpacer;				tab2.addChild(thumb2);			}						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Fill Containers & Mask			scroll1 = new ScrollBar(roller1, track1, tab1, rollerOn1);			scroll2 = new ScrollBar(roller2, track2, tab2, rollerOn2);						container.addChild(sc1);			container.addChild(sc2);			container.addChild(bg);			container.addChild(nv);			container.addChild(myMask1);			container.addChild(myMask2);			container.addChild(scrollMask1);			container.addChild(scrollMask2);						tab1.addChild(scroll1);			tab2.addChild(scroll2);			tab1.mask = myMask1;			tab2.mask = myMask2;			sc1.mask  = scrollMask1;			sc2.mask  = scrollMask2;						addChild(container);		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Switch Videos		public function videoSwitch(videoName):void        {			nv.closeOut();			nv.resetNav = false;						if (videoPlaying) // checks if a video is being played			{					vc.clearSource(); // if so clear out the video					removeContainerChildren();			}			addContainerChildren(videoName); // add new video selected from thumbnails        }				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Remove Video		protected function removeContainerChildren():void        {			container.removeChild(closeBtn);			                if(container.contains(videoDisplay))										if(videoDisplay.parent != null)						videoDisplay.parent.removeChild(videoDisplay);						                if(container.contains(vc))                {					vc.parent.removeChild(vc);					vc.removeEventListener("movieEnds", videoEnds);                }        }				protected function videoEnds(e:CustomEvent):void		{			videoPlaying = false;            removeContainerChildren();		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Add Video		protected function addContainerChildren(videoName):void        {        	videoPlaying = true;			vc = new VideoClass(videoName, videoHolder);			vc.addEventListener("movieEnds", videoEnds);			container.addChildAt(videoDisplay, 1);			container.addChildAt(vc, 2);			addCloseButton();							// [ VMC ] Integration Point - Clip Viewed				var clipInfo:Object = {					id: videoName,					title:  metaDataHash[videoName].title,					flvSourceUrl: vc.flvSourceUrl,					thumbnailUrl: metaDataHash[videoName].thumb				}				VMCUtility.getInstance().getRemoteNode().clipViewed(clipInfo);        }				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Video: Close button, Pause & Remove Player		private function addCloseButton():void		{			container.addChildAt(closeBtn, 2);			closeBtn.addEventListener(MouseEvent.MOUSE_UP, closeButtonClicked);		}				private function closeButtonClicked(event:MouseEvent):void		{			videoPlaying = false;			vc.clearSource();			removeContainerChildren();			closeBtn.removeEventListener(MouseEvent.MOUSE_UP, closeButtonClicked);		}				public function pauseMovie(e:CustomEvent):void		{						if (!videoPlaying)	{				//			}			else if (videoPlaying)	{				//vc.videoStatus = "NotPlaying";				//trace("vs.videoStatus = "+vc.videoStatus);				vc.tabPaused();			}		}				public function upauseMovie(e:CustomEvent):void		{						vc.unPaused();		}				// [ VMC ] Function		private function getPosition():Number {			var pos:Number = 0;			if ( vc ) {				pos = vc.getPosition();			}			return pos;			}			} // end Class} // end package/*               ,'``.._   ,'``.              :,--._:)\,:,._,.:       All Glory to              :`--,''   :`...';\      the HYPNO TOAD!               `,'       `---'  `.               /                 :              /                   \            ,'                     :\.___,-.           `...,---'``````-..._    |:       \             (                 )   ;:    )   \  _,-.              `.              (   //          `'    \               :               `.//  )      )     , ;             ,-|`.            _,'/       )    ) ,' ,'            (  :`.`-..____..=:.-':     .     _,' ,'             `,'\ ``--....-)='    `._,  \  ,') _ '``._          _.-/ _ `.       (_)      /     )' ; / \ \`-.'         `--(   `-:`.     `' ___..'  _,-'   |/   `.)             `-. `.`.``-----``--,  .'               |/`.\`'        ,',');                   `         (/  (/*/